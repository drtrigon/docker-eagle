# $DOCKER_USER, $DOCKER_PASS (hide) and $TRAVIS_TOKEN (hide) in Settings > Environment Variables
# Triggering builds (get TOKEN): https://docs.travis-ci.com/user/triggering-builds/
# Safelisting or blocklisting branches: https://docs.travis-ci.com/user/customizing-the-build/#Building-only-the-latest-commit

# TODO: gerber jobs do not finish properly yet - compare output to test-eagle-edrc travis output

# TODO: testing without "|| true" to get error feadback, add other eagle versions
# TODO: may be create scripts for eagle commands and add them in dockerfile

# TODO: drc&erc but how to get output?'
# TODO: auto-router step with proposal for routing as output

language: bash

sudo: false

env:
  global:
    - BOARD_FILE=test-eagle-edrc
    - GERBER_CAM_FILE=gerb274x.cam
    - EXCELLON_CAM_FILE=excellon.cam
    - ULP_BOM_FILE=bom.ulp
#    - EAGLE_VERSION=7.7.0
  matrix:
    - DOCKERFILE=Dockerfile.ubuntu DOCKERTAG=ubuntu-14.04
    #- DOCKERFILE=Dockerfile.ubuntu-16.04 DOCKERTAG=ubuntu-16.04
    #- DOCKERFILE=Dockerfile.centos DOCKERTAG=centos-7
    #- DOCKERFILE=Dockerfile.debian DOCKERTAG=debian-jessie
    #- DOCKERFILE=Dockerfile.debian-jessie-toollabs DOCKERTAG=debian-jessie-toollabs

services:
  - docker

install:
  - COMMIT=${TRAVIS_COMMIT::8} ;
  - REPO=drtrigon/docker-eagle ;
  - LATEST=ubuntu-14.04 ;
#  - docker login -u $DOCKER_USER -p $DOCKER_PASS ;
#  - docker build -f $DOCKERFILE -t $REPO:$COMMIT . ;
#  - docker tag $REPO:$COMMIT $REPO:$DOCKERTAG ;
#  # - docker tag $REPO:$COMMIT $REPO:travis-$TRAVIS_BUILD_NUMBER ;
#  - if [[ "$DOCKERTAG" == "$LATEST" ]] ; then
#      docker tag $REPO:$COMMIT $REPO:latest ;
#    fi
  - COMMIT=$DOCKERTAG ;          # debug: pull instead of build for faster developpment
  - docker pull $REPO:$COMMIT ;  # debug: pull instead of build for faster developpment

script:
  - docker images ;
  #- docker run -t -d --name testing $REPO:$COMMIT  bin/bash ;
  #- docker run -t -d -e GERBER_CAM_FILE -e EXCELLON_CAM_FILE -e ULP_BOM_FILE -e BOARD_FILE --name testing $REPO:$COMMIT  bin/bash ;  # env vars passing not working
  - docker run -t -d -e GERBER_CAM_FILE=$GERBER_CAM_FILE -e EXCELLON_CAM_FILE=$EXCELLON_CAM_FILE -e ULP_BOM_FILE=$ULP_BOM_FILE -e BOARD_FILE=$BOARD_FILE --name testing $REPO:$COMMIT  bin/bash ;
  - docker ps -l ;
  #- docker exec -t testing  xvfb-run -a /opt/eagle-7.7.0/bin/eagle -? || true ;     # DOES need a display
  #- docker exec -t testing  xvfb-run -a /opt/eagle-7.7.0/bin/eagle -d? || true ;    # DOES need a display
  - docker exec -t testing  /bin/bash -c 'xvfb-run -a $EAGLE -?' || true ;
  - docker exec -t testing  /bin/bash -c 'xvfb-run -a $EAGLE -d?' || true ;
  ### this is where testing ends and usage examples start ###
  - docker exec -t testing  /bin/bash -c 'env' ;
  - docker exec -t testing  apt-get install -y git xdotool x11-utils psmisc zip gerbv caca-utils ;
  - docker exec -t testing  git clone https://github.com/drtrigon/test-eagle-edrc.git ;
  - docker exec -t testing  /bin/bash -c 'mv /test-eagle-edrc/* /' ;
  # choose free license "EAGLE Express" (with or w/o "Warning" dialog)
  - docker exec -t testing  /bin/bash -c '/sbin/start-stop-daemon --start --quiet --pidfile /tmp/custom_xvfb_1.pid --make-pidfile --background --exec /usr/bin/Xvfb -- :1 -ac -screen 0 1280x1024x16; sleep 3; export DISPLAY=:1.0; $EAGLE & sleep 3; xdotool getwindowfocus getwindowname; xdotool key Right; xdotool key Return; sleep 2; xdotool getwindowfocus getwindowname; xdotool key y; sleep 2; xdotool getwindowfocus getwindowname; xdotool key Escape; sleep 2; xdotool getwindowfocus getwindowname; xdotool mousemove 1 1 click 1; sleep 2; xdotool getwindowfocus getwindowname; xdotool keydown alt key f; xdotool keyup alt; xdotool key x; sleep 5; xwininfo -tree -root; killall eagle || true' ;
  # generate gerbers ${BOARD_FILE}.brd in $PWD directory (with "Check for Update" dialog - refocus to CAM Processor not working)
  - docker exec -t testing  /bin/bash -c '/sbin/start-stop-daemon --start --quiet --pidfile /tmp/custom_xvfb_1.pid --make-pidfile --background --exec /usr/bin/Xvfb -- :1 -ac -screen 0 1280x1024x16; sleep 3; export DISPLAY=:1.0; $EAGLE & sleep 3; xdotool getwindowfocus getwindowname; xdotool key Escape; sleep 2; xdotool getwindowfocus getwindowname; xdotool mousemove 1 1 click 1; sleep 2; xdotool getwindowfocus getwindowname; xdotool keydown alt key f; xdotool keyup alt; xdotool key o; sleep 2; xdotool getwindowfocus getwindowname; xdotool type ${BOARD_FILE}.brd; xdotool key Return; sleep 2; xdotool getwindowfocus getwindowname; xdotool keydown alt key f; xdotool keyup alt; xdotool key w; sleep 2; xdotool getwindowfocus getwindowname; xdotool keydown alt key f; xdotool keyup alt; xdotool key m; sleep 2; xdotool getwindowfocus getwindowname; xdotool keydown alt key f; xdotool keyup alt; xdotool key o; xdotool key j; sleep 2; xdotool getwindowfocus getwindowname; xdotool type $GERBER_CAM_FILE; xdotool key Return; sleep 10; xdotool getwindowfocus getwindowname; xdotool mousemove 1 1 click 1; sleep 2; xdotool getwindowfocus getwindowname; xdotool keydown alt key j; xdotool keyup alt; sleep 30; xdotool getwindowfocus getwindowname; xdotool keydown alt key f; xdotool keyup alt; xdotool key x; sleep 5; xwininfo -tree -root; killall eagle || true' ;
  - docker exec -t testing  /bin/bash -c 'cat ${BOARD_FILE}.gpi' ;  # gerb274x.cam
  # drill excellion creation (with "Check for Update" dialog - refocus to CAM Processor not working)
  - docker exec -t testing  /bin/bash -c '/sbin/start-stop-daemon --start --quiet --pidfile /tmp/custom_xvfb_1.pid --make-pidfile --background --exec /usr/bin/Xvfb -- :1 -ac -screen 0 1280x1024x16; sleep 3; export DISPLAY=:1.0; $EAGLE & sleep 3; xdotool getwindowfocus getwindowname; xdotool key Escape; sleep 2; xdotool getwindowfocus getwindowname; xdotool mousemove 1 1 click 1; sleep 2; xdotool getwindowfocus getwindowname; xdotool keydown alt key f; xdotool keyup alt; xdotool key o; sleep 2; xdotool getwindowfocus getwindowname; xdotool type ${BOARD_FILE}.brd; xdotool key Return; sleep 2; xdotool getwindowfocus getwindowname; xdotool keydown alt key f; xdotool keyup alt; xdotool key w; sleep 2; xdotool getwindowfocus getwindowname; xdotool keydown alt key f; xdotool keyup alt; xdotool key m; sleep 2; xdotool getwindowfocus getwindowname; xdotool keydown alt key f; xdotool keyup alt; xdotool key o; xdotool key j; sleep 2; xdotool getwindowfocus getwindowname; xdotool type $EXCELLON_CAM_FILE; xdotool key Return; sleep 10; xdotool getwindowfocus getwindowname; xdotool mousemove 1 1 click 1; sleep 2; xdotool getwindowfocus getwindowname; xdotool keydown alt key j; xdotool keyup alt; sleep 30; xdotool getwindowfocus getwindowname; xdotool keydown alt key f; xdotool keyup alt; xdotool key x; sleep 5; xwininfo -tree -root; killall eagle || true' ;
  - docker exec -t testing  /bin/bash -c 'cat ${BOARD_FILE}.dri' ;  # excellon.cam
  # bom part list creation
  - docker exec -t testing  /bin/bash -c '/sbin/start-stop-daemon --start --quiet --pidfile /tmp/custom_xvfb_1.pid --make-pidfile --background --exec /usr/bin/Xvfb -- :1 -ac -screen 0 1280x1024x16; sleep 3; export DISPLAY=:1.0; $EAGLE & sleep 3; xdotool getwindowfocus getwindowname; xdotool key Escape; sleep 2; xdotool getwindowfocus getwindowname; xdotool mousemove 1 1 click 1; sleep 2; xdotool getwindowfocus getwindowname; xdotool keydown alt key f; xdotool keyup alt; xdotool key o; sleep 2; xdotool getwindowfocus getwindowname; xdotool type ${BOARD_FILE}.brd; xdotool key Return; sleep 2; xdotool getwindowfocus getwindowname; xdotool keydown alt key f; xdotool keyup alt; xdotool key r; sleep 2; xdotool getwindowfocus getwindowname; xdotool type $ULP_BOM_FILE; xdotool key Return; sleep 10; xdotool getwindowfocus getwindowname; xdotool keydown alt key s; xdotool keyup alt; sleep 2; xdotool getwindowfocus getwindowname; xdotool keydown alt key s; xdotool keyup alt; sleep 5; xdotool getwindowfocus getwindowname; xdotool mousemove 1 1 click 1; sleep 2; xdotool getwindowfocus getwindowname; xdotool key Escape; sleep 2; xdotool getwindowfocus getwindowname; xdotool mousemove 1 1 click 1; sleep 2; xdotool getwindowfocus getwindowname; xdotool keydown alt key f; xdotool keyup alt; xdotool key x; sleep 5; xwininfo -tree -root; killall eagle || true' ;
  - docker exec -t testing  /bin/bash -c 'cat ${BOARD_FILE}.txt' ;  # bom.ulp
  # prepare pushing results back to git repo
  - docker exec -t testing  /bin/bash -c 'mv /test-eagle-edrc/.git /' ;
  - docker exec -t testing  git status ;
  - docker exec -t testing  git checkout -b result/travis ;
  # add generated files to zip archive
  - docker exec -t testing  /bin/bash -c 'zip ${BOARD_FILE}.zip ${BOARD_FILE}.cmp ${BOARD_FILE}.sol ${BOARD_FILE}.plc ${BOARD_FILE}.stc ${BOARD_FILE}.sts' ;  # gerb274x.cam
  - docker exec -t testing  /bin/bash -c 'zip -u ${BOARD_FILE}.zip ${BOARD_FILE}.drd' ;  # excellon.cam
  - docker exec -t testing  /bin/bash -c 'unzip -l ${BOARD_FILE}.zip' ;
  # gerbv convert gerber to png for displaying (--resolution=640,480 does not work)
  - docker exec -t testing  /bin/bash -c 'gerbv --export=png --dpi=600,600 --output=${BOARD_FILE}.png ${BOARD_FILE}.cmp ${BOARD_FILE}.sol ${BOARD_FILE}.plc ${BOARD_FILE}.stc ${BOARD_FILE}.sts' ;
  - docker exec -t testing  /bin/bash -c 'img2txt --width=80 ${BOARD_FILE}.png' ;
  # push result back to git repo
  - docker exec -t testing  /bin/bash -c 'ls -la ${BOARD_FILE}.*' ;
  - docker exec -t testing  /bin/bash -c 'git add ${BOARD_FILE}.zip ${BOARD_FILE}.gpi ${BOARD_FILE}.dri ${BOARD_FILE}.txt ${BOARD_FILE}.png' ;
  - docker exec -t testing  git status ;
  - docker exec -t testing  git config user.email 'travis@travis-ci.org'
  - docker exec -t testing  git config user.name 'Travis CI'
  - docker exec -t testing  git commit --message "Travis build \#$TRAVIS_BUILD_NUMBER" ;
  - docker exec -t testing  git push -f https://$GIT_USER:$GIT_PASS@github.com/drtrigon/test-eagle-edrc.git result/travis ;  # dangerous; overwrite remote branch!
#  - docker exec -t testing  apt-get install -y tree ;
#  - docker exec -t testing  /bin/bash -c 'tree' ;
#  - docker exec -t testing  tree ;
  - docker stop testing ;
  - docker rm testing ;
  - docker rmi $REPO:$COMMIT ;
  #- docker images ;
  #- docker container ls ;
  - docker ps -l ;

#after_success:
#  # Upload to docker if it's on the master branch
#  - if [[ "$TRAVIS_BRANCH" == "master" && "$TRAVIS_PULL_REQUEST" == "false" ]] ; then
#      docker push $REPO ;
#    fi

#  # trigger docker-sketchbook (same tests based on docker-arduino)
#  - |-
#    if [[ "$TRAVIS_BRANCH" == "master" && "$TRAVIS_PULL_REQUEST" == "false" ]] ; then
#      if [[ "$DOCKERTAG" == "$LATEST" ]] ; then
#        curl -s -X POST -H "Content-Type: application/json" -H "Accept: application/json" -H "Travis-API-Version: 3" -H "Authorization: token $TRAVIS_TOKEN" -d "{\"request\": {\"branch\":\"master\"}}" https://api.travis-ci.org/repo/drtrigon%2Fdocker-file-metadata-wikibot/requests ;
#        curl -s -X POST -H "Content-Type: application/json" -H "Accept: application/json" -H "Travis-API-Version: 3" -H "Authorization: token $TRAVIS_TOKEN" -d "{\"request\": {\"branch\":\"master\"}}" https://api.travis-ci.org/repo/drtrigon%2Finstall-file-metadata-wikibot/requests ;
#      fi ;
#    fi

notifications:
  email: false
